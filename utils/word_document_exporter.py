"""Word document exporter utility module.

This module provides functionality for exporting travel reports and other content
to Microsoft Word documents with proper formatting.
"""

import datetime
import os
import re
from typing import Dict, Any, Optional

from docx import Document
from docx.enum.text import WD_ALIGN_PARAGRAPH


class WordDocumentExporter:
    """Utility class for exporting travel reports to Word documents"""

    def __init__(self, output_directory: str = "./output"):
        self.output_directory = output_directory
        os.makedirs(output_directory, exist_ok=True)

    def create_travel_report_doc(
        self, content: str, query_info: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        Create a Word document from travel report content

        Args:
            content (str): The travel report content in markdown format
            query_info (dict): Optional query information for document metadata

        Returns:
            str: Path to the created Word document
        """
        # Create new document
        doc = Document()

        # Add document title
        title = doc.add_heading("AI Travel Planner Report", 0)
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER

        # Add metadata
        doc.add_paragraph(
            f"Generated: {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}"
        )
        doc.add_paragraph("Created by: AI Travel Planning Assistant")

        if query_info:
            if query_info.get("startCity") or query_info.get("endCity"):
                start_city = query_info.get("startCity", "N/A")
                end_city = query_info.get("endCity", "N/A")
                doc.add_paragraph(f"Trip: {start_city} → {end_city}")
            start_code = query_info.get("startLocationCode")
            end_code = query_info.get("endLocationCode")
            if start_code or end_code:
                doc.add_paragraph(
                    f"Airports: {start_code or 'N/A'} → {end_code or 'N/A'}"
                )

        # Add separator line
        doc.add_paragraph("=" * 60)

        # Process content and convert markdown-like formatting to Word
        self._process_content_to_word(doc, content)

        # Add footer
        doc.add_page_break()
        footer_para = doc.add_paragraph()
        footer_text = (
            "This travel plan was generated by AI. Please verify all information, "
            "especially prices, operating hours, and travel requirements "
            "before your trip."
        )
        footer_para.add_run(footer_text).italic = True
        footer_para.alignment = WD_ALIGN_PARAGRAPH.CENTER

        # Generate filename
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        filename = f"{self.output_directory}/AI_Travel_Report_{timestamp}.docx"

        # Save document
        doc.save(filename)

        return filename

    def _process_content_to_word(self, doc: Document, content: str) -> None:
        """Process markdown-like content and add to Word document"""
        lines = content.split("\n")

        for line in lines:
            line = line.strip()

            if not line:
                doc.add_paragraph()  # Add blank line
                continue

            # Handle headers
            if line.startswith("###"):
                heading_text = line.replace("###", "").strip()
                doc.add_heading(heading_text, level=3)
            elif line.startswith("##"):
                heading_text = line.replace("##", "").strip()
                doc.add_heading(heading_text, level=2)
            elif line.startswith("#"):
                heading_text = line.replace("#", "").strip()
                doc.add_heading(heading_text, level=1)

            # Handle bullet points
            elif line.startswith("- ") or line.startswith("* "):
                bullet_text = line[2:].strip()
                doc.add_paragraph(bullet_text, style="List Bullet")

            # Handle numbered lists
            elif re.match(r"^\d+\.", line):
                list_text = re.sub(r"^\d+\.\s*", "", line)
                doc.add_paragraph(list_text, style="List Number")

            # Handle bold text (simple **text** format)
            elif "**" in line:
                para = doc.add_paragraph()
                self._add_formatted_text(para, line)

            # Regular paragraph
            else:
                if line.strip():  # Only add non-empty lines
                    doc.add_paragraph(line)

    def _add_formatted_text(self, paragraph: Any, text: str) -> None:
        """Add text with bold formatting to paragraph"""
        parts = text.split("**")

        for i, part in enumerate(parts):
            if i % 2 == 0:
                # Regular text
                paragraph.add_run(part)
            else:
                # Bold text
                run = paragraph.add_run(part)
                run.bold = True

    def create_simple_doc(self, title: str, content: str) -> str:
        """Create a simple Word document with title and content"""
        doc = Document()

        # Add title
        doc.add_heading(title, 0)

        # Add content
        doc.add_paragraph(content)

        # Generate filename
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        safe_title = "".join(
            c for c in title if c.isalnum() or c in (" ", "-", "_")
        ).rstrip()
        filename = f"{self.output_directory}/{safe_title}_{timestamp}.docx"

        # Save document
        doc.save(filename)

        return filename
